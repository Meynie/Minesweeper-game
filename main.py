import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror

from mybutton import MyButton

color_text = {
    1: '#0006b3',
    2: '#0046d1',
    3: '#00ff6e',
    4: '#ff7b00',
    5: '#10524d',
    6: '#630326',
    7: '#b8b35e',
    8: '#59361f',
}


class MineSweeper:

    ROW = 3
    COLUMN = 3
    window = tk.Tk()
    window.geometry('500x200')
    MINES = 3
    FLAG = MINES
    NOT_MINE = (ROW * COLUMN) - MINES
    IS_GAME_OVER = False
    IS_GAME_WIN = False
    IS_FIRST_CLICK = True

    def __init__(self):
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        self.buttons = []

        for i in range(MineSweeper.ROW + 2):
            temp = []
            for j in range(MineSweeper.COLUMN + 2):
                btn = MyButton(MineSweeper.window, x=i, y=j, number=0)
                btn.config(command=lambda button=btn: self.click(button))  # lambda - –ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ self.click
                btn.bind('<Button-3>', self.flag)  # –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                temp.append(btn)
            self.buttons.append(temp)

        statusbar = tk.Label(self.window, text=f"–ú–∏–Ω—ã {MineSweeper.FLAG}", bd=1,
                             relief=tk.SUNKEN, anchor=tk.W)

        statusbar.grid(row=0, column=1)
        #statusbar = s

    def flag(self, event): # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞
        cur_button = event.widget

        if MineSweeper.IS_GAME_OVER:
            return

        if cur_button['state'] == 'normal':
            cur_button['state'] = 'disabled'
            cur_button['text'] = 'üö©'
            cur_button['disabledforeground'] = 'red'

        elif cur_button['text'] == 'üö©':
            cur_button['text'] = ''
            cur_button['state'] = 'normal'

    def click(self, clicked_button: MyButton):
        counter = 0

        if MineSweeper.IS_GAME_OVER:
            return None

        if MineSweeper.IS_GAME_WIN:
            return None

        if MineSweeper.IS_FIRST_CLICK:
            self.insert_mines(clicked_button.number)
            self.count_mines_in_button()
            self.print_buttons()
            MineSweeper.IS_FIRST_CLICK = False

        if clicked_button.is_mine:
            clicked_button.config(text='*', background='red', disabledforeground='black')
            clicked_button.is_open = True
            MineSweeper.IS_GAME_OVER = True
            showinfo('Game over', '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
            for i in range(1, MineSweeper.ROW + 1): # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ –±—ã–ª–∏ –±–æ–º–±—ã
                for j in range(1, MineSweeper.COLUMN + 1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn['text'] = '*'

        else:
            color = color_text.get(clicked_button.count_mine, 'black')

            if clicked_button.count_mine:
                clicked_button.config(text=clicked_button.count_mine, disabledforeground=color)
                clicked_button.is_open = True

            else:
                self.breadth_first_search(clicked_button)
        clicked_button.config(state='disabled')  # –Ω–µ–ª—å–∑—è –Ω–∞–∂–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
        clicked_button.config(relief=tk.SUNKEN)  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        for i in range(1, MineSweeper.ROW + 1):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ –±—ã–ª–∏ –±–æ–º–±—ã
            for j in range(1, MineSweeper.COLUMN + 1):
                btn = self.buttons[i][j]
                if btn.is_open:
                    counter += 1
                    if counter == self.NOT_MINE:
                        MineSweeper.IS_GAME_WIN = True
                        showinfo('You are winner', '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')

    def breadth_first_search(self, btn: MyButton):

        queue = [btn]
        while queue:
            cur_btn = queue.pop()
            color = color_text.get(cur_btn.count_mine, 'black')
            if cur_btn.count_mine:
                cur_btn.config(text=cur_btn.count_mine, disabledforeground=color)
            else:
                cur_btn.config(text='', disabledforeground=color)
            cur_btn.is_open = True
            cur_btn.config(state='disabled')  # –Ω–µ–ª—å–∑—è –Ω–∞–∂–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
            cur_btn.config(relief=tk.SUNKEN)  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
            if cur_btn.count_mine == 0:
                x, y = cur_btn.x, cur_btn.y
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        # if not abs(dx - dy) == 1:
                        # continue

                        next_btn = self.buttons[x + dx][y + dy]
                        if not next_btn.is_open and 1 <= next_btn.x <= MineSweeper.ROW and \
                                1 <= next_btn.y <= MineSweeper.COLUMN and next_btn not in queue:
                            queue.append(next_btn)

    def reload(self):
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        """
        [child.destroy() for child in self.window.winfo_children()]  # –æ—á–∏—â–µ–Ω–∏–µ –æ–∫–Ω–∞
        self.__init__()
        self.create_widgets()
        MineSweeper.IS_FIRST_CLICK = True
        MineSweeper.IS_GAME_OVER = False
        MineSweeper.IS_GAME_WIN = False

    def create_set_window(self):
        set_window = tk.Toplevel(self.window)
        set_window.wm_title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

        tk.Label(set_window, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:').grid(row=0, column=0)
        row_entry = tk.Entry(set_window)
        row_entry.insert(0, MineSweeper.ROW)
        row_entry.grid(row=0, column=1, padx=20, pady=20)

        tk.Label(set_window, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫:').grid(row=1, column=0)
        column_entry = tk.Entry(set_window)
        column_entry.insert(0, MineSweeper.COLUMN)
        column_entry.grid(row=1, column=1, padx=20, pady=20)

        tk.Label(set_window, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:').grid(row=2, column=0)
        mine_entry = tk.Entry(set_window)
        mine_entry.insert(0, MineSweeper.MINES)
        mine_entry.grid(row=2, column=1, padx=20, pady=20)

        save_btn = tk.Button(set_window, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                             command=lambda: self.save_set(row_entry, column_entry, mine_entry))
        save_btn.grid(row=3, column=0, columnspan=2, padx=20, pady=20)

    def save_set(self, row: tk.Entry, column: tk.Entry, mine: tk.Entry):

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–≤–æ–¥–∏–º—ã—Ö –≤–µ–ª–∏—á–∏–Ω
        try:
            int(row.get()), int(column.get()), int(mine.get())
        except ValueError:
            showerror('–û—à–∏–±–∫–∞', '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            return

        if int(row.get()) <= 0 or int(column.get()) <= 0 or int(mine.get()) <= 0:
            showerror('–û—à–∏–±–∫–∞', '–í–µ–ª–∏—á–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            return

        if int(row.get()) * int(column.get()) <= int(mine.get()):
            showerror('–û—à–∏–±–∫–∞', '–ú–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –∫–ª–µ—Ç–æ–∫')
            return

        if int(row.get()) > 20 or int(column.get()) > 20:
            showerror('–û—à–∏–±–∫–∞', '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ–ª–µ')
            return

        MineSweeper.ROW = int(row.get())
        MineSweeper.COLUMN = int(column.get())
        MineSweeper.MINES = int(mine.get())
        self.reload()

    def create_widgets(self):

        # —Å–æ–∑–¥–∞—é –º–µ–Ω—é
        menu_bar = tk.Menu(self.window)
        self.window.config(menu=menu_bar)

        settings_menu = tk.Menu(menu_bar, tearoff=0)
        settings_menu.add_command(label='–ò–≥—Ä–∞—Ç—å', command=self.reload)
        settings_menu.add_command(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', command=self.create_set_window)
        settings_menu.add_command(label='–í—ã—Ö–æ–¥', command=self.window.destroy)
        menu_bar.add_cascade(label='File', menu=settings_menu)

        count = 1
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMN + 1):
                btn = self.buttons[i][j]
                btn.number = count
                btn.grid(row=i, column=j, stick='NWES')
                count += 1

        # –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ —ç–∫—Ä–∞–Ω—É
        for i in range(1, MineSweeper.ROW + 1):
            tk.Grid.rowconfigure(self.window, i, weight=1)

        for i in range(1, MineSweeper.COLUMN + 1):
            tk.Grid.columnconfigure(self.window, i, weight=1)

    def open_all_buttons(self):

        for i in range(MineSweeper.ROW + 2):
            for j in range(MineSweeper.COLUMN + 2):
                btn = self.buttons[i][j]

                if btn.is_mine:
                    btn.config(text='*', background='red', disabledforeground='black')

                elif btn.count_mine in color_text:
                    color = color_text.get(btn.count_mine, 'black')
                    btn.config(text=btn.count_mine, fg=color)

    def start(self):
        self.create_widgets()
        # self.open_all_buttons()

        MineSweeper.window.mainloop()

    def print_buttons(self):
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMN + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end='')
                else:
                    print(btn.count_mine, end='')
            print()

    def insert_mines(self, number: int):
        index_mines = self.get_mines_places(number)
        print(index_mines)

        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMN + 1):
                btn = self.buttons[i][j]

                if btn.number in index_mines:
                    btn.is_mine = True

    def count_mines_in_button(self):
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMN + 1):
                btn = self.buttons[i][j]
                count_mine = 0
                if not btn.is_mine:
                    # –Ω–∏–∂–µ –ø–æ–ª—É—á–∞—é –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –∫–Ω–æ–ø–æ–∫
                    for row_dx in [-1, 0, 1]:
                        for column_dx in [-1, 0, 1]:
                            neighbour = self.buttons[i + row_dx][j + column_dx]
                            if neighbour.is_mine:
                                count_mine += 1

                btn.count_mine = count_mine

    @staticmethod
    def get_mines_places(exclude_num: int):
        indx = list(range(1, MineSweeper.COLUMN * MineSweeper.ROW + 1))
        print(f'–ò—Å–∫–ª—é—á–∞—é –∫–Ω–æ–ø–∫—É –Ω–æ–º–µ—Ä: {exclude_num}')
        indx.remove(exclude_num)
        shuffle(indx)
        return indx[:MineSweeper.MINES]


game = MineSweeper()
game.start()
